#!/bin/bash
# Automate setup replica server in MySQL

set -euo pipefail

declare -r CONFIG_FILE="${1:-replica.conf}"
declare -r BACKUP_FILE="${BACKUP_FILE:-}"

declare -r RED='\033[0;31m'
declare -r GREEN='\033[0;32m'
declare -r YELLOW='\033[0;33m'
declare -r BLUE='\033[0;34m'
declare -r RESET='\033[0m'

log() {
    local level="$1"
    shift

    local color

    case "$level" in
    ERROR)
        color="${RED}"
        ;;
    INFO)
        color="${GREEN}"
        ;;
    WARNING)
        color="${YELLOW}"
        ;;
    REPLICA_STATUS)
        color="${GREEN}"
        ;;
    *) ;;
    esac

    echo -e "${color}[$level]${RESET} $*" >&2
}

load_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        log "ERROR" "Config file not found: $CONFIG_FILE"
        exit 1
    fi
    source "$CONFIG_FILE"
    log "INFO" "Loaded config file: $CONFIG_FILE"
}

validate_config() {
    local -r required_vars=(
        "REPLIC_SERVER_ID" "SOURCE_HOST" "SOURCE_PORT" "SOURCE_USER"
        "SOURCE_PASSWORD" "SOURCE_LOG_FILE" "SOURCE_LOG_POS" "DATABASE_NAME"
        "MYSQL_ROOT_PASSWORD"
    )

    for var in "${required_vars[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            log "ERROR" "Required configuration variable '$var' is not set."
        fi
    done

    log "INFO" "Configuration validation passed."
}

backup_mysql_config() {
    if [[ -f "$MYSQL_CNF" ]]; then
        cp "$MYSQL_CNF" "${MYSQL_CNF}.bak.$(date +%Y%m%d%H%M%S)"
        log "INFO" "MySQL configuration backed up."
    fi
}

edit_mysql_configuration() {
    log "INFO" "Configuring MySQL for replication..."

    cat >"/tmp/replica.cnf" <<EOF
[mysqld]
server-id=${REPLICA_SERVER_ID}
relay-log=${RELAY_LOG:-mysql-relay-bin}
skip-replica-start=1
EOF

    if [[ -n "${DATABASE_NAME:-}" ]]; then
        echo "replicate-do-db=${DATABASE_NAME}" >>"/tmp/replica.cnf"
    fi

    if ! grep -q "server-id.*=.*${REPLICA_SERVER_ID}" "$MYSQL_CNF" 2>/dev/null; then
        {
            echo ""
            echo "# Replica Configuration"
            echo "# Generated by setup_relica.sh"
            cat "/tmp/replica.cnf"
        } >>"$MYSQL_CNF"
        log "INFO" "$MYSQL configuration updated."
    else
        log "INFO" "MySQL configuration already contains the required settings."
    fi

    rm -f "/tmp/replica.cnf"
}

restart_mysql() {
    log "INFO" "Restarting MySQL..."

    if command -v systemctl &>/dev/null; then
        systemctl restart mysql
    else
        log "ERROR" "Unable to restart MySQL. Unknown init system."
        exit 1
    fi

    local count=0
    while ! mysqladmin ping --silent && [[ $count -lt 30 ]]; do
        sleep 2
        ((count++))
    done

    if [[ $count -eq 30 ]]; then
        log "ERROR" "MySQL failed to start after 60 seconds."
    fi

    log "INFO" "MySQL restarted successfully."
}

setup_database() {
    log "INFO" "Setting up database..."

    mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "CREATE DATABASE IF NOT EXISTS \`$DATABASE_NAME\`;" 2>/dev/null || {
        log "ERROR" "Failed to create database $DATABASE_NAME"
        exit 1
    }

    if [[ -f "${BACKUP_FILE}" ]]; then
        log "INFO" "Importing database dump..."
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" "$DATABASE_NAME" <"${BACKUP_FILE}" || {
            log "ERROR" "Failed to import database dump"
        }
        log "INFO" "Database dump imported successfully."
    else
        log "WARNING" "No database dump found."
        log "INFO" "Please manually import your database dump before starting replication."
    fi
}

configure_replication() {
    log "INFO" "Configuring replication..."

    if ! mysql -h "$SOURCE_HOST" -P "$SOURCE_PORT" -u "$SOURCE_USER" -p"$SOURCE_PASSWORD" -e "SELECT 1;" 2>/dev/null; then
        log "ERROR" "Cannot connect to source MySQL server at ${SOURCE_HOST}:${SOURCE_PORT}"
    fi

    mysql -u root -p"$MYSQL_ROOT_PASSWORD" <<EOF
CHANGE REPLICATION SOURCE TO
    SOURCE_HOST='$SOURCE_HOST',
    SOURCE_PORT=$SOURCE_PORT,
    SOURCE_USER='$SOURCE_USER',
    SOURCE_PASSWORD='$SOURCE_PASSWORD',
    SOURCE_LOG_FILE='$SOURCE_LOG_FILE',
    SOURCE_LOG_POS=$SOURCE_LOG_POS,
    GET_SOURCE_PUBLIC_KEY=1;
EOF

    log "INFO" "Replication configured successfully."
}

start_replication() {
    log "INFO" "Starting replication..."

    mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "START REPLICA;" || {
        log "ERROR" "Failed to start replication"
        exit 1
    }

    log "INFO" "Replication started successfully."
}

check_replication_status() {
    log "Checking replication status..."

    local status_output

    status_output=$(mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "SHOW REPLICA STATUS\G" 2>/dev/null)

    if [[ -z "$status_output" ]]; then
        log "ERROR" "Failed to get replication status"
    fi

    local io_running sql_running
    local seconds_behind
    local last_error

    io_running=$(grep "Replica_IO_Running:" <<<"$status_output" | awk '{print $2}')
    sql_running=$(grep "Replica_SQL_Running:" <<<"$status_output" | awk '{print $2}')
    seconds_behind=$(grep "Seconds_Behind_Source:" <<<"$status_output" | awk '{print $2}')
    last_error=$(grep "Last_Error:" <<<"$status_output" | cut -d' ' -f2-)

    log "REPLICA_STATUS" "Replica_IO_Running=$io_running"
    log "REPLICA_STATUS" "Replica_SQL_Running=$sql_running"
    log "REPLICA_STATUS" "Seconds_Behind_Source=$seconds_behind"

    if [[ -n "$last_error" && "$last_error" != "Last_Error:" ]]; then
        log "ERROR" "$last_error"
    fi

    if [[ "$io_running" == "Yes" && "$sql_running" == "Yes" ]]; then
        log "INFO" "Replication is running successfully!"
        return 0
    else
        log "ERROR" "Replication is not running properly. Check the error messages above."
    fi
}

log "INFO" "Starting MySQL replica setup..."

if [[ $EUID -ne 0 ]]; then
    log "ERROR" "This script must be run as root."
fi

load_config && validate_config

backup_mysql_config

edit_mysql_configuration && restart_mysql

setup_database && configure_replication

start_replication && check_replication_status

log "INFO" "Replication setup completed successfully."
