#!/bin/bash
set -euo pipefail

### COLORS ###
readonly GREEN='\033[1;32m' BLUE='\033[1;34m' YELLOW='\033[1;33m' RED='\033[1;31m' RESET='\033[0m'

# Check archive type
is_archive() {
    case $(file --mime-type -b "$1") in
    application/gzip | application/x-tar | application/zip | application/x-rar | application/x-7z-compressed)
        return 0
        ;;
    *) return 1 ;;
    esac
}

# Extract archive based on mime type
extract() {
    local archive="$1" mime out
    mime="$(file --mime-type -b "$archive")"

    [[ "$verbose" = true ]] && >&2 echo -e "${BLUE} Detected: $mime${RESET}"

    case "$mime" in
    application/gzip)
        if [[ "$archive" == *.* && "${archive%.*}" != "" ]]; then
            out="${archive%.*}"
        else
            out="$(basename "$archive").out"
        fi
        gunzip -c "$archive" >"$out"
        ;;
    application/x-tar)
        tar -xf "$archive"
        out=$(tar -tf "$archive" | head -n1)
        ;;
    application/zip)
        unzip -o "$archive" >/dev/null
        out=$(unzip -l "$archive" | awk 'NR==4 { print $4 }')
        ;;
    application/x-rar)
        unrar x -o+ "$archive" >/dev/null
        out=$(unrar lb "$archive" | head -n1)
        ;;
    application/x-7z-compressed)
        7z x -y "$archive" >/dev/null
        out=$(7z l "$archive" | awk '/^[ ]+[0-9]+/ {print $NF; exit}')
        ;;
    *)
        [[ "$verbose" = true ]] && echo -e "${RED} Unsupported archive type: $mime${RESET}"
        exit 1
        ;;
    esac

    echo "$out"
}

### Script starts here ###
verbose=false
output_dir=""
args=()

usage() {
    cat <<EOF
Usage: $(basename "$0") <archive>
OPTIONS:
      -h, --help            Show help display
      -v, --verbose         Enable detail output
      -o, --output DIR      Extract to specified directory
EOF
}

while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
        usage
        exit 0
        ;;
    -v | --verbose)
        verbose=true
        shift
        ;;
    -o | --output)
        if [[ $# -lt 2 ]] || [[ "$2" == -* ]]; then
            echo "Error: --output requires a directory argument" >&2
            exit 1
        fi
        output_dir="$2"
        if [[ -f "$output_dir" ]]; then
            echo "Error: '$output_dir' is not a directory." >&2
            exit 1
        elif [[ ! -d "$output_dir" ]]; then
            mkdir -p "$output_dir"
        fi
        shift 2
        ;;
    --)
        shift
        break
        ;;
    -*)
        echo "Unknown argument $1" >&2
        exit 1
        ;;
    *)
        args+=("$1")
        shift
        ;;
    esac
done

while [[ $# -gt 0 ]]; do
    args+=("$1")
    shift
done

if [[ ${#args[@]} -eq 0 ]]; then
    echo "Error: Archive file not specified"
    usage
    exit 1
elif [[ ${#args[@]} -gt 1 ]]; then
    echo "Error: Too many arguments. Expected only one archive file."
    usage
    exit 1
fi

archive="${args[0]}"
if [[ ! -f "$archive" ]]; then
    echo -e "Error: '$archive' is not a valid file."
    exit 1
fi

output_dir="${output_dir:=$(mktemp -d "./extracted-XXX")}"

cp "$archive" "$output_dir/"
cd "$output_dir"

[[ "$verbose" = true ]] && echo -e "\n${GREEN} üöÄ Starting extraction‚Ä¶${RESET}"

current_file="$(basename "$archive")"

if ! is_archive "$current_file"; then
    [[ "$verbose" = true ]] && echo -e "Warning: ${YELLOW} Looks like it's not archive. Bye!${RESET}"
    exit 2
fi

while is_archive "$current_file"; do
    next_file=$(extract "$current_file")

    [[ "$verbose" = true ]] && echo -e "${YELLOW} Extracted ${RED}Ôêê $current_file${RESET}"

    rm -f "$current_file"

    if [[ -n "$next_file" && -f "$next_file" ]]; then
        if is_archive "$next_file"; then
            [[ "$verbose" = true ]] && echo -e "${YELLOW} Found nested archive: ${RED}Ôêê $next_file${RESET}"
            current_file="$next_file"
        else
            [[ "$verbose" = true ]] && echo -e "${YELLOW} No further nested archives found.${RESET}"
            break
        fi
    else
        [[ "$verbose" = true ]] && echo -e "${YELLOW} No further nested archives found or identified.${RESET}"
        break
    fi
done

if [[ "$verbose" = true ]]; then
    echo -e "${GREEN} ‚úÖ Done!${RESET}"
    echo -e "\n Extracted files are in ${BLUE}Óóø $(pwd)/${RESET}"
fi
